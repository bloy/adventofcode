package main

import (
	"bufio"
	"fmt"
)

/*
L,10,L,8,R,8,L,8,R,6,
L,10,L,8,R,8, # first choice
L,8,R,6,
R,6,R,8,R,6,R,6,L,8, # 2nd choice
L,10,R,6,R,8,R,8,R,6,R,6,L,8, # 3rd box
L,10,R,6,R,8,R,8,R,6,R,6,L,8, # last box
L,10,R,6,R,8,R,8,L,10,L,8,R,8,L,8,R,6

..............L###10####^..............................
..............#........................................
..............#........................................
..............#........................................
..............8........................................
..............#........................................
..............#........................................
..............#........................................
......L###8###R........................................
......#................................................
......#................................................
......#................................................
......8................................................
......#................................................
......#................................................
......#................................................
L##6##R................................................
#......................................................
#......................................................
#......................................................
#...............................................R##6###
10..............................................#......
#...............................................#......
#...............................................#......
#...............................................8......
#...............................................#......
L###8###R.......................................#......
........#.......................................#......
........#.............###8#####.........R###8###L......
........#.............#.......#.........#..............
........8.............#.......#.........#..............
........#.............6.......6.........#..............
........#.####8####...#.......#.........8..............
........#.2.......#...#.......#.........#..............
........L2#6#####.#...####8####2#.......#..............
..........6.....#.6...........2.2.......#..............
..........#.....#.#...........#2####8###L..............
..........#.....4.#.............#......................
..........#.###4#2#.............4......................
..........#.2...2...............#......................
..........#2#4###...........##4##2#....................
............6...............2...2.#....................
............#.............#2##4##.#....................
............#.............#.#.....#....................
............#.###6###.....#.#.....8....................
............#.2.....2.....6.#.....#....................
............#2###6###2#...#.#.....#....................
..............#.....#.#...#.#.....#....................
..............#.....4.4...#2###6###....................
..............6.....#.#.....2..........................
..............#.....#2###6###..........................
..............#.......2................................
..............####8####................................
*/

func init() {
	AddSolution(17, solveDay17)
}

func solveDay17(pr *PuzzleRun) {
	fmt.Print("\x1b[2J\x1b[H")
	scanner := bufio.NewScanner(pr.InFile)
	program := ""
	for scanner.Scan() {
		program = program + scanner.Text()
	}
	if err := scanner.Err(); err != nil {
		pr.logger.Fatal(err)
	}
	pr.ReportLoad()

	comp, err := NewIntcodeFromInput(program)
	pr.CheckError(err)
	comp.AddStandardOpcodes()
	outputs, err := comp.RunProgram(nil)
	grid := NewGrid()
	cursor := Point{0, 0}
	for _, n := range outputs {
		if n == 10 {
			cursor = Point{X: 0, Y: cursor.Y + 1}
			continue
		}
		grid.SetPoint(cursor, rune(n))
		cursor = Point{X: cursor.X + 1, Y: cursor.Y}
	}
	fmt.Println(grid)
	min, max := grid.Bounds()
	sum := 0
	for y := min.Y; y <= max.Y; y++ {
		for x := min.X; x <= max.X; x++ {
			point := Point{X: x, Y: y}
			if grid.GetPoint(point) != '#' {
				continue
			}
			if grid.GetPoint(point.Add(North)) != '#' {
				continue
			}
			if grid.GetPoint(point.Add(South)) != '#' {
				continue
			}
			if grid.GetPoint(point.Add(East)) != '#' {
				continue
			}
			if grid.GetPoint(point.Add(West)) != '#' {
				continue
			}
			sum += point.X * point.Y
		}
	}
	pr.ReportPart(sum)

	sequence := "L,10,L,8,R,8,L,8,R,6,L,10,L,8,R,8,L,8,R,6,R,6,R,8,R,6,R,6,L,8,L,10,R,6,R,8,R,8,R,6,R,6,L,8,L,10,R,6,R,8,R,8,R,6,R,6,L,8,L,10,R,6,R,8,R,8,L,10,L,8,R,8,L,8,R,6"
	pr.ReportPart(len(sequence))

}
